// Core user and account types
export interface User {
  id: string;
  email: string;
  createdAt: Date;
  subscription: SubscriptionTier;
  preferences: UserPreferences;
  connectedAccounts: ConnectedAccount[];
}

export type SubscriptionTier = 'free' | 'pro' | 'team';

export interface UserPreferences {
  responseStyle: 'formal' | 'casual' | 'auto';
  autoGenerateDrafts: boolean;
  confidenceThreshold: number;
  excludedSenders: string[];
  workflowNotifications: boolean;
  learningEnabled: boolean;
}

export interface ConnectedAccount {
  id: string;
  provider: 'gmail' | 'outlook';
  email: string;
  displayName: string;
  isActive: boolean;
  lastSyncAt: Date;
  learningStatus: 'pending' | 'learning' | 'complete';
  emailCount: number;
  processingStats: {
    totalProcessed: number;
    draftsGenerated: number;
    draftsAccepted: number;
    averageConfidence: number;
  };
}

// Email and processing types
export interface Email {
  id: string;
  provider: 'gmail' | 'outlook';
  threadId: string;
  from: string;
  fromName: string;
  to: string[];
  cc?: string[];
  bcc?: string[];
  subject: string;
  content: string;
  snippet: string;
  receivedAt: Date;
  labels: string[];
  attachments: Attachment[];
  isRead: boolean;
  requiresResponse: boolean;
  urgency: 'low' | 'medium' | 'high';
  category: 'onboarding' | 'support' | 'sales' | 'meeting' | 'other';
}

export interface Attachment {
  id: string;
  filename: string;
  mimeType: string;
  size: number;
  downloadUrl?: string;
}

export interface EmailThread {
  id: string;
  subject: string;
  participants: string[];
  emails: Email[];
  lastActivity: Date;
  hasAIDraft: boolean;
  workflowDetected?: string;
  status: 'unread' | 'draft_ready' | 'responded' | 'archived';
}

// AI Analysis and Draft types
export interface EmailAnalysis {
  intent: 'question' | 'request' | 'information' | 'meeting' | 'complaint' | 'other';
  urgency: 'low' | 'medium' | 'high';
  sentiment: 'positive' | 'neutral' | 'negative';
  entities: ExtractedEntity[];
  suggestedWorkflow?: string;
  requiresResponse: boolean;
  confidence: number;
  keyTopics: string[];
  actionItems: string[];
}

export interface ExtractedEntity {
  type: 'person' | 'company' | 'date' | 'document' | 'product' | 'location';
  value: string;
  confidence: number;
}

export interface DraftResponse {
  id: string;
  emailId: string;
  content: string;
  subject?: string;
  attachments: SuggestedAttachment[];
  confidence: number;
  workflowUsed?: string;
  reasoning: string;
  generatedAt: Date;
  status: 'pending' | 'approved' | 'rejected' | 'edited';
  userFeedback?: UserFeedback;
  estimatedTimeToWrite: number; // in minutes
}

export interface SuggestedAttachment {
  filename: string;
  description: string;
  confidence: number;
  workflowSource?: string;
}

export interface UserFeedback {
  draftAccepted: boolean;
  userEdits?: string;
  rating: 1 | 2 | 3 | 4 | 5;
  feedback?: string;
  submittedAt: Date;
  improvementSuggestions?: string[];
}

// Workflow and Pattern types
export interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  category: 'onboarding' | 'support' | 'sales' | 'meeting' | 'custom';
  triggerConditions: TriggerCondition[];
  responseTemplate: string;
  requiredDocuments: DocumentTemplate[];
  followUpActions: FollowUpAction[];
  usageCount: number;
  successRate: number;
  averageResponseTime: number;
  lastUsed?: Date;
  isActive: boolean;
  createdBy: 'ai' | 'user';
  tags: string[];
}

export interface TriggerCondition {
  type: 'keyword' | 'sender' | 'subject' | 'content' | 'attachment';
  value: string;
  operator: 'contains' | 'equals' | 'starts_with' | 'ends_with' | 'regex';
  weight: number;
}

export interface DocumentTemplate {
  id: string;
  filename: string;
  description: string;
  category: string;
  downloadUrl: string;
  lastUpdated: Date;
  usageCount: number;
}

export interface FollowUpAction {
  type: 'schedule_reminder' | 'create_task' | 'send_calendar_invite' | 'update_crm';
  delay: number; // in hours
  description: string;
  isActive: boolean;
}

// Chat and AI Assistant types
export interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  context?: ChatContext;
  actions?: ChatAction[];
}

export interface ChatContext {
  emailId?: string;
  workflowId?: string;
  threadId?: string;
  relatedEmails?: string[];
}

export interface ChatAction {
  type: 'view_email' | 'edit_workflow' | 'generate_report' | 'connect_account';
  label: string;
  data: any;
}

// Analytics and Insights types
export interface AnalyticsData {
  timeframe: 'day' | 'week' | 'month' | 'quarter';
  emailMetrics: EmailMetrics;
  aiPerformance: AIPerformanceMetrics;
  workflowMetrics: WorkflowMetrics;
  userEngagement: UserEngagementMetrics;
}

export interface EmailMetrics {
  totalEmails: number;
  emailsRequiringResponse: number;
  averageResponseTime: number;
  responseRate: number;
  topSenders: { email: string; count: number }[];
  emailsByCategory: { category: string; count: number }[];
  dailyVolume: { date: string; count: number }[];
}

export interface AIPerformanceMetrics {
  draftsGenerated: number;
  draftsAccepted: number;
  averageConfidence: number;
  averageGenerationTime: number;
  userSatisfactionRating: number;
  improvementRate: number;
  timeSaved: number; // in hours
  accuracyTrend: { date: string; accuracy: number }[];
}

export interface WorkflowMetrics {
  totalWorkflows: number;
  activeWorkflows: number;
  mostUsedWorkflows: { name: string; usage: number }[];
  workflowSuccessRates: { name: string; rate: number }[];
  newWorkflowsDetected: number;
  workflowEfficiency: { name: string; timeReduction: number }[];
}

export interface UserEngagementMetrics {
  dailyActiveUsers: number;
  sessionDuration: number;
  featuresUsed: { feature: string; usage: number }[];
  userRetention: { period: string; rate: number }[];
  feedbackSubmissions: number;
  supportTickets: number;
}

// Processing and System types
export interface ProcessingJob {
  id: string;
  type: 'email_analysis' | 'draft_generation' | 'pattern_learning' | 'workflow_detection';
  status: 'pending' | 'processing' | 'completed' | 'failed';
  emailId?: string;
  userId: string;
  startedAt?: Date;
  completedAt?: Date;
  error?: string;
  progress: number;
  estimatedTimeRemaining?: number;
}

export interface SystemStatus {
  emailProviders: {
    gmail: 'connected' | 'disconnected' | 'error';
    outlook: 'connected' | 'disconnected' | 'error';
  };
  aiServices: {
    openai: 'operational' | 'degraded' | 'down';
    embeddings: 'operational' | 'degraded' | 'down';
  };
  processingQueue: {
    pending: number;
    processing: number;
    failed: number;
  };
  lastUpdated: Date;
}

// API Response types
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  pageSize: number;
  hasMore: boolean;
}

// WebSocket Event types
export interface WebSocketEvent {
  type: 'email_received' | 'draft_generated' | 'workflow_detected' | 'processing_status' | 'learning_updated';
  data: any;
  timestamp: Date;
}